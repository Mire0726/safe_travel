// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Transport is an object representing the database table.
type Transport struct {
	ID             string                  `boil:"id" json:"id" toml:"id" yaml:"id"`
	EventID        string                  `boil:"event_id" json:"event_id" toml:"event_id" yaml:"event_id"`
	TransportType  TransportsTransportType `boil:"transport_type" json:"transport_type" toml:"transport_type" yaml:"transport_type"`
	Memo           string                  `boil:"memo" json:"memo" toml:"memo" yaml:"memo"`
	StartLocation  string                  `boil:"start_location" json:"start_location" toml:"start_location" yaml:"start_location"`
	ArriveLocation string                  `boil:"arrive_location" json:"arrive_location" toml:"arrive_location" yaml:"arrive_location"`
	StartAt        time.Time               `boil:"start_at" json:"start_at" toml:"start_at" yaml:"start_at"`
	ArriveAt       time.Time               `boil:"arrive_at" json:"arrive_at" toml:"arrive_at" yaml:"arrive_at"`
	CreatedAt      time.Time               `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time               `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *transportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransportColumns = struct {
	ID             string
	EventID        string
	TransportType  string
	Memo           string
	StartLocation  string
	ArriveLocation string
	StartAt        string
	ArriveAt       string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "id",
	EventID:        "event_id",
	TransportType:  "transport_type",
	Memo:           "memo",
	StartLocation:  "start_location",
	ArriveLocation: "arrive_location",
	StartAt:        "start_at",
	ArriveAt:       "arrive_at",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var TransportTableColumns = struct {
	ID             string
	EventID        string
	TransportType  string
	Memo           string
	StartLocation  string
	ArriveLocation string
	StartAt        string
	ArriveAt       string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "transports.id",
	EventID:        "transports.event_id",
	TransportType:  "transports.transport_type",
	Memo:           "transports.memo",
	StartLocation:  "transports.start_location",
	ArriveLocation: "transports.arrive_location",
	StartAt:        "transports.start_at",
	ArriveAt:       "transports.arrive_at",
	CreatedAt:      "transports.created_at",
	UpdatedAt:      "transports.updated_at",
}

// Generated where

type whereHelperTransportsTransportType struct{ field string }

func (w whereHelperTransportsTransportType) EQ(x TransportsTransportType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperTransportsTransportType) NEQ(x TransportsTransportType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperTransportsTransportType) LT(x TransportsTransportType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperTransportsTransportType) LTE(x TransportsTransportType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperTransportsTransportType) GT(x TransportsTransportType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperTransportsTransportType) GTE(x TransportsTransportType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperTransportsTransportType) IN(slice []TransportsTransportType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperTransportsTransportType) NIN(slice []TransportsTransportType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var TransportWhere = struct {
	ID             whereHelperstring
	EventID        whereHelperstring
	TransportType  whereHelperTransportsTransportType
	Memo           whereHelperstring
	StartLocation  whereHelperstring
	ArriveLocation whereHelperstring
	StartAt        whereHelpertime_Time
	ArriveAt       whereHelpertime_Time
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
}{
	ID:             whereHelperstring{field: "`transports`.`id`"},
	EventID:        whereHelperstring{field: "`transports`.`event_id`"},
	TransportType:  whereHelperTransportsTransportType{field: "`transports`.`transport_type`"},
	Memo:           whereHelperstring{field: "`transports`.`memo`"},
	StartLocation:  whereHelperstring{field: "`transports`.`start_location`"},
	ArriveLocation: whereHelperstring{field: "`transports`.`arrive_location`"},
	StartAt:        whereHelpertime_Time{field: "`transports`.`start_at`"},
	ArriveAt:       whereHelpertime_Time{field: "`transports`.`arrive_at`"},
	CreatedAt:      whereHelpertime_Time{field: "`transports`.`created_at`"},
	UpdatedAt:      whereHelpertime_Time{field: "`transports`.`updated_at`"},
}

// TransportRels is where relationship names are stored.
var TransportRels = struct {
	Event string
}{
	Event: "Event",
}

// transportR is where relationships are stored.
type transportR struct {
	Event *Event `boil:"Event" json:"Event" toml:"Event" yaml:"Event"`
}

// NewStruct creates a new relationship struct
func (*transportR) NewStruct() *transportR {
	return &transportR{}
}

func (r *transportR) GetEvent() *Event {
	if r == nil {
		return nil
	}
	return r.Event
}

// transportL is where Load methods for each relationship are stored.
type transportL struct{}

var (
	transportAllColumns            = []string{"id", "event_id", "transport_type", "memo", "start_location", "arrive_location", "start_at", "arrive_at", "created_at", "updated_at"}
	transportColumnsWithoutDefault = []string{"id", "event_id", "transport_type", "memo", "start_location", "arrive_location", "start_at", "arrive_at", "created_at", "updated_at"}
	transportColumnsWithDefault    = []string{}
	transportPrimaryKeyColumns     = []string{"id"}
	transportGeneratedColumns      = []string{}
)

type (
	// TransportSlice is an alias for a slice of pointers to Transport.
	// This should almost always be used instead of []Transport.
	TransportSlice []*Transport
	// TransportHook is the signature for custom Transport hook methods
	TransportHook func(context.Context, boil.ContextExecutor, *Transport) error

	transportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transportType                 = reflect.TypeOf(&Transport{})
	transportMapping              = queries.MakeStructMapping(transportType)
	transportPrimaryKeyMapping, _ = queries.BindMapping(transportType, transportMapping, transportPrimaryKeyColumns)
	transportInsertCacheMut       sync.RWMutex
	transportInsertCache          = make(map[string]insertCache)
	transportUpdateCacheMut       sync.RWMutex
	transportUpdateCache          = make(map[string]updateCache)
	transportUpsertCacheMut       sync.RWMutex
	transportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var transportAfterSelectMu sync.Mutex
var transportAfterSelectHooks []TransportHook

var transportBeforeInsertMu sync.Mutex
var transportBeforeInsertHooks []TransportHook
var transportAfterInsertMu sync.Mutex
var transportAfterInsertHooks []TransportHook

var transportBeforeUpdateMu sync.Mutex
var transportBeforeUpdateHooks []TransportHook
var transportAfterUpdateMu sync.Mutex
var transportAfterUpdateHooks []TransportHook

var transportBeforeDeleteMu sync.Mutex
var transportBeforeDeleteHooks []TransportHook
var transportAfterDeleteMu sync.Mutex
var transportAfterDeleteHooks []TransportHook

var transportBeforeUpsertMu sync.Mutex
var transportBeforeUpsertHooks []TransportHook
var transportAfterUpsertMu sync.Mutex
var transportAfterUpsertHooks []TransportHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Transport) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transportAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Transport) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transportBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Transport) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transportAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Transport) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transportBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Transport) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transportAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Transport) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transportBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Transport) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transportAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Transport) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transportBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Transport) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transportAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTransportHook registers your hook function for all future operations.
func AddTransportHook(hookPoint boil.HookPoint, transportHook TransportHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		transportAfterSelectMu.Lock()
		transportAfterSelectHooks = append(transportAfterSelectHooks, transportHook)
		transportAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		transportBeforeInsertMu.Lock()
		transportBeforeInsertHooks = append(transportBeforeInsertHooks, transportHook)
		transportBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		transportAfterInsertMu.Lock()
		transportAfterInsertHooks = append(transportAfterInsertHooks, transportHook)
		transportAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		transportBeforeUpdateMu.Lock()
		transportBeforeUpdateHooks = append(transportBeforeUpdateHooks, transportHook)
		transportBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		transportAfterUpdateMu.Lock()
		transportAfterUpdateHooks = append(transportAfterUpdateHooks, transportHook)
		transportAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		transportBeforeDeleteMu.Lock()
		transportBeforeDeleteHooks = append(transportBeforeDeleteHooks, transportHook)
		transportBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		transportAfterDeleteMu.Lock()
		transportAfterDeleteHooks = append(transportAfterDeleteHooks, transportHook)
		transportAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		transportBeforeUpsertMu.Lock()
		transportBeforeUpsertHooks = append(transportBeforeUpsertHooks, transportHook)
		transportBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		transportAfterUpsertMu.Lock()
		transportAfterUpsertHooks = append(transportAfterUpsertHooks, transportHook)
		transportAfterUpsertMu.Unlock()
	}
}

// One returns a single transport record from the query.
func (q transportQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Transport, error) {
	o := &Transport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for transports")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Transport records from the query.
func (q transportQuery) All(ctx context.Context, exec boil.ContextExecutor) (TransportSlice, error) {
	var o []*Transport

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Transport slice")
	}

	if len(transportAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Transport records in the query.
func (q transportQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count transports rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q transportQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if transports exists")
	}

	return count > 0, nil
}

// Event pointed to by the foreign key.
func (o *Transport) Event(mods ...qm.QueryMod) eventQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.EventID),
	}

	queryMods = append(queryMods, mods...)

	return Events(queryMods...)
}

// LoadEvent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transportL) LoadEvent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransport interface{}, mods queries.Applicator) error {
	var slice []*Transport
	var object *Transport

	if singular {
		var ok bool
		object, ok = maybeTransport.(*Transport)
		if !ok {
			object = new(Transport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransport))
			}
		}
	} else {
		s, ok := maybeTransport.(*[]*Transport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransport))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transportR{}
		}
		args[object.EventID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transportR{}
			}

			args[obj.EventID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`events`),
		qm.WhereIn(`events.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Event")
	}

	var resultSlice []*Event
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Event")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for events")
	}

	if len(eventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Event = foreign
		if foreign.R == nil {
			foreign.R = &eventR{}
		}
		foreign.R.Transports = append(foreign.R.Transports, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EventID == foreign.ID {
				local.R.Event = foreign
				if foreign.R == nil {
					foreign.R = &eventR{}
				}
				foreign.R.Transports = append(foreign.R.Transports, local)
				break
			}
		}
	}

	return nil
}

// SetEvent of the transport to the related item.
// Sets o.R.Event to related.
// Adds o to related.R.Transports.
func (o *Transport) SetEvent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Event) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `transports` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"event_id"}),
		strmangle.WhereClause("`", "`", 0, transportPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EventID = related.ID
	if o.R == nil {
		o.R = &transportR{
			Event: related,
		}
	} else {
		o.R.Event = related
	}

	if related.R == nil {
		related.R = &eventR{
			Transports: TransportSlice{o},
		}
	} else {
		related.R.Transports = append(related.R.Transports, o)
	}

	return nil
}

// Transports retrieves all the records using an executor.
func Transports(mods ...qm.QueryMod) transportQuery {
	mods = append(mods, qm.From("`transports`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`transports`.*"})
	}

	return transportQuery{q}
}

// FindTransport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransport(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Transport, error) {
	transportObj := &Transport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `transports` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, transportObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from transports")
	}

	if err = transportObj.doAfterSelectHooks(ctx, exec); err != nil {
		return transportObj, err
	}

	return transportObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Transport) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no transports provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transportColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transportInsertCacheMut.RLock()
	cache, cached := transportInsertCache[key]
	transportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transportAllColumns,
			transportColumnsWithDefault,
			transportColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transportType, transportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transportType, transportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `transports` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `transports` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `transports` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, transportPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into transports")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for transports")
	}

CacheNoHooks:
	if !cached {
		transportInsertCacheMut.Lock()
		transportInsertCache[key] = cache
		transportInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Transport.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Transport) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	transportUpdateCacheMut.RLock()
	cache, cached := transportUpdateCache[key]
	transportUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transportAllColumns,
			transportPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update transports, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `transports` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, transportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transportType, transportMapping, append(wl, transportPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update transports row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for transports")
	}

	if !cached {
		transportUpdateCacheMut.Lock()
		transportUpdateCache[key] = cache
		transportUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q transportQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for transports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for transports")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransportSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `transports` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transportPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in transport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all transport")
	}
	return rowsAff, nil
}

var mySQLTransportUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Transport) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no transports provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transportColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTransportUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transportUpsertCacheMut.RLock()
	cache, cached := transportUpsertCache[key]
	transportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			transportAllColumns,
			transportColumnsWithDefault,
			transportColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			transportAllColumns,
			transportPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert transports, could not build update column list")
		}

		ret := strmangle.SetComplement(transportAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`transports`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `transports` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(transportType, transportMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transportType, transportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for transports")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(transportType, transportMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for transports")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for transports")
	}

CacheNoHooks:
	if !cached {
		transportUpsertCacheMut.Lock()
		transportUpsertCache[key] = cache
		transportUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Transport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Transport) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Transport provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transportPrimaryKeyMapping)
	sql := "DELETE FROM `transports` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from transports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for transports")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q transportQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no transportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from transports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for transports")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransportSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(transportBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `transports` WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 0, transportPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from transport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for transports")
	}

	if len(transportAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Transport) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTransport(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransportSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `transports`.* FROM `transports` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transportPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in TransportSlice")
	}

	*o = slice

	return nil
}

// TransportExists checks if the Transport row exists.
func TransportExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `transports` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if transports exists")
	}

	return exists, nil
}

// Exists checks if the Transport row exists.
func (o *Transport) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TransportExists(ctx, exec, o.ID)
}
